[{"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\App.tsx":"1","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\index.tsx":"2","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\ApolloProvider.tsx":"3","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\context\\AuthContext.tsx":"4","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\pages\\Home.tsx":"5","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\Navbar.tsx":"6","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\NewPostForm.tsx":"7","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\Post.tsx":"8","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\LoginForm.tsx":"9","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\pages\\Login.tsx":"10","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\RegisterForm.tsx":"11","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\routes\\UnprivateRoute.tsx":"12","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\styled\\StyledComponents.tsx":"13","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\Input.tsx":"14","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\graphqlQueries.tsx":"15","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\pages\\Register.tsx":"16","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\LikeButton.tsx":"17","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\CommentButton.tsx":"18","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\CommentForm.tsx":"19"},{"size":935,"mtime":1607014666420,"results":"20","hashOfConfig":"21"},{"size":429,"mtime":1606589329102,"results":"22","hashOfConfig":"21"},{"size":691,"mtime":1606589323538,"results":"23","hashOfConfig":"21"},{"size":1618,"mtime":1606585694815,"results":"24","hashOfConfig":"21"},{"size":1801,"mtime":1607016158080,"results":"25","hashOfConfig":"21"},{"size":2409,"mtime":1607014701561,"results":"26","hashOfConfig":"21"},{"size":3346,"mtime":1606938052720,"results":"27","hashOfConfig":"21"},{"size":3662,"mtime":1607016460465,"results":"28","hashOfConfig":"21"},{"size":2998,"mtime":1606611317178,"results":"29","hashOfConfig":"21"},{"size":616,"mtime":1606591623525,"results":"30","hashOfConfig":"21"},{"size":6019,"mtime":1606611922649,"results":"31","hashOfConfig":"21"},{"size":503,"mtime":1606588894880,"results":"32","hashOfConfig":"21"},{"size":587,"mtime":1606611374944,"results":"33","hashOfConfig":"21"},{"size":1299,"mtime":1606611731768,"results":"34","hashOfConfig":"21"},{"size":275,"mtime":1606941809324,"results":"35","hashOfConfig":"21"},{"size":660,"mtime":1606592611672,"results":"36","hashOfConfig":"21"},{"size":2286,"mtime":1607012468648,"results":"37","hashOfConfig":"21"},{"size":1859,"mtime":1607024188469,"results":"38","hashOfConfig":"21"},{"size":676,"mtime":1607024232641,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"bhlofe",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\App.tsx",[],["82","83"],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\index.tsx",[],["84","85"],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\ApolloProvider.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\context\\AuthContext.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\pages\\Home.tsx",["86"],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\Navbar.tsx",["87","88","89"],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\NewPostForm.tsx",["90"],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\Post.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\LoginForm.tsx",["91","92"],"import styled from 'styled-components';\r\nimport React, { useState, useContext } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/client';\r\nimport { History } from 'history';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nimport { Button } from './styled/StyledComponents';\r\nimport Input from './Input';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 500px;\r\n  margin: auto;\r\n`;\r\n\r\nconst ErrorWrapper = styled.div`\r\n  margin: auto;\r\n  background-color: #ffcfcf;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  border-color: #d17373;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n  max-width: 500px;\r\n`;\r\n\r\nconst Errors = styled.ul`\r\n  color: #b34040;\r\n`;\r\n\r\nconst LOGIN_QUERY = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\ninterface Error {\r\n  username?: string | null;\r\n  password?: string | null;\r\n}\r\n\r\ninterface Props {\r\n  history: History;\r\n}\r\n\r\nconst LoginForm: React.FC<Props> = (props) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errors, setErrors] = useState<Error>({});\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const context = useContext(AuthContext);\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.target.name === 'username'\r\n      ? setUsername(e.target.value)\r\n      : setPassword(e.target.value);\r\n  };\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_QUERY, {\r\n    update(_, result) {\r\n      setSuccess(true);\r\n      context.login(result.data.login);\r\n      props.history.push('/');\r\n    },\r\n    onError(err) {\r\n      setErrors(\r\n        err.graphQLErrors[0].extensions?.exception.errors || { error: 'error' }\r\n      );\r\n    },\r\n    variables: { username, password },\r\n  });\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    loginUser();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form onSubmit={onSubmit}>\r\n        <Input label='Username' name='username' onChange={onChange}></Input>\r\n        <Input\r\n          label='Password'\r\n          name='password'\r\n          type='password'\r\n          onChange={onChange}\r\n        ></Input>\r\n        {username.length && password.length > 0 ? (\r\n          <Button>Log in</Button>\r\n        ) : (\r\n          <Button disabled>Log in</Button>\r\n        )}\r\n      </Form>\r\n      {Object.keys(errors).length > 0 ? (\r\n        <ErrorWrapper>\r\n          <Errors>\r\n            {Object.values(errors).map((err: string) => {\r\n              return <li key={err}>{err}</li>;\r\n            })}\r\n          </Errors>\r\n        </ErrorWrapper>\r\n      ) : null}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\pages\\Login.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\RegisterForm.tsx",["93","94"],"import styled, { keyframes } from 'styled-components';\r\nimport React, { useState, useEffect, ComponentProps } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/client';\r\nimport { History } from 'history';\r\n\r\nimport { Button } from './styled/StyledComponents';\r\nimport Input from './Input';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 500px;\r\n  margin: auto;\r\n`;\r\n\r\nconst SpinAnim = keyframes` \r\n0% {\r\n  -webkit-transform: rotate(0deg);\r\n  transform: rotate(0deg);\r\n}\r\n100% {\r\n  -webkit-transform: rotate(360deg);\r\n  transform: rotate(360deg);\r\n}`;\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n  position: absolute;\r\n  display: none;\r\n  transform: translate(-50%, -50%);\r\n  &.show {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 50%;\r\n  background: linear-gradient(to right, green 10%, rgba(255, 255, 255, 0) 42%);\r\n  position: absolute;\r\n  animation: ${SpinAnim} 1.4s infinite linear;\r\n\r\n  &:after {\r\n    background: #ffffff;\r\n    width: 75%;\r\n    height: 75%;\r\n    border-radius: 50%;\r\n    content: '';\r\n    margin: auto;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n  }\r\n`;\r\n\r\nconst ErrorWrapper = styled.div`\r\n  margin: auto;\r\n  background-color: #ffcfcf;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  border-color: #d17373;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n  max-width: 500px;\r\n`;\r\n\r\nconst Errors = styled.ul`\r\n  color: #b34040;\r\n`;\r\n\r\nconst REGISTER_QUERY = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n    $email: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n        email: $email\r\n      }\r\n    ) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  history: History;\r\n}\r\n\r\ninterface Error {\r\n  username?: string | null;\r\n  password?: string | null;\r\n  email?: string | null;\r\n  confirmPassword?: string | null;\r\n}\r\n\r\nconst RegisterForm: React.FC<Props> = (props) => {\r\n  const fields = { username: '', password: '', confirmPassword: '', email: '' };\r\n  const [errors, setErrors] = useState<Error>({});\r\n  const [textCount, setTextCount] = useState(fields);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      const interval = setInterval(() => {\r\n        props.history.push('/login');\r\n      }, 3000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [success]);\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    switch (e.target.name) {\r\n      case 'email':\r\n        setTextCount({ ...textCount, [e.target.name]: e.target.value });\r\n        break;\r\n      case 'username':\r\n        setTextCount({ ...textCount, [e.target.name]: e.target.value });\r\n        break;\r\n      case 'password':\r\n        setTextCount({ ...textCount, [e.target.name]: e.target.value });\r\n        break;\r\n      case 'confirmPassword':\r\n        setTextCount({ ...textCount, [e.target.name]: e.target.value });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    console.log(textCount);\r\n  };\r\n\r\n  const [registerUser, { loading }] = useMutation(REGISTER_QUERY, {\r\n    update(_, result) {\r\n      console.log(result);\r\n      setSuccess(true);\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions?.exception.errors);\r\n    },\r\n    variables: textCount,\r\n  });\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    registerUser();\r\n  };\r\n\r\n  const hide = loading ? 'hide' : '';\r\n\r\n  return (\r\n    <Container>\r\n      {success ? (\r\n        <div>\r\n          Account creation successful! You will be redirected in 3 seconds or\r\n          click <a href='/login'>Login </a>\r\n          to login.\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <Form onSubmit={onSubmit}>\r\n            <Input\r\n              className={`${errors.email ? 'error' : null} ${hide}`}\r\n              name='email'\r\n              onChange={onChange}\r\n              label='Email'\r\n            ></Input>\r\n            <Input\r\n              className={`${errors.username ? 'error' : null} ${hide}`}\r\n              name='username'\r\n              onChange={onChange}\r\n              label='Username'\r\n            ></Input>\r\n\r\n            <Input\r\n              className={`${\r\n                errors.password || errors.confirmPassword ? 'error' : null\r\n              } ${hide}`}\r\n              name='password'\r\n              type='password'\r\n              onChange={onChange}\r\n              label='Password'\r\n            ></Input>\r\n\r\n            <Input\r\n              className={`${errors.confirmPassword ? 'error' : null} ${hide}`}\r\n              name='confirmPassword'\r\n              type='password'\r\n              onChange={onChange}\r\n              label='Confirm Password'\r\n            ></Input>\r\n\r\n            {Object.values(textCount).reduce((a, b) => a && b) ? (\r\n              <Button type='submit' className={hide}>\r\n                Register\r\n              </Button>\r\n            ) : (\r\n              <Button disabled>Register</Button>\r\n            )}\r\n            <SpinnerWrapper className={loading ? 'show' : ''}>\r\n              <Spinner />\r\n            </SpinnerWrapper>\r\n          </Form>\r\n\r\n          {Object.keys(errors).length > 0 ? (\r\n            <ErrorWrapper>\r\n              <Errors>\r\n                {Object.values(errors).map((err) => {\r\n                  return <li key={err}>{err}</li>;\r\n                })}\r\n              </Errors>\r\n            </ErrorWrapper>\r\n          ) : null}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\routes\\UnprivateRoute.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\styled\\StyledComponents.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\Input.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\graphqlQueries.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\pages\\Register.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\LikeButton.tsx",[],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\CommentButton.tsx",["95"],"C:\\Users\\asbina\\Desktop\\tstest\\client\\src\\components\\CommentForm.tsx",["96"],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"97","replacedBy":"101"},{"ruleId":"99","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":7,"column":8,"nodeType":"105","messageId":"106","endLine":7,"endColumn":19},{"ruleId":"103","severity":1,"message":"107","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":25},{"ruleId":"103","severity":1,"message":"108","line":1,"column":27,"nodeType":"105","messageId":"106","endLine":1,"endColumn":36},{"ruleId":"103","severity":1,"message":"109","line":8,"column":7,"nodeType":"105","messageId":"106","endLine":8,"endColumn":13},{"ruleId":"103","severity":1,"message":"110","line":101,"column":24,"nodeType":"105","messageId":"106","endLine":101,"endColumn":31},{"ruleId":"103","severity":1,"message":"111","line":65,"column":10,"nodeType":"105","messageId":"106","endLine":65,"endColumn":17},{"ruleId":"103","severity":1,"message":"110","line":75,"column":23,"nodeType":"105","messageId":"106","endLine":75,"endColumn":30},{"ruleId":"103","severity":1,"message":"112","line":2,"column":38,"nodeType":"105","messageId":"106","endLine":2,"endColumn":52},{"ruleId":"113","severity":1,"message":"114","line":135,"column":6,"nodeType":"115","endLine":135,"endColumn":15,"suggestions":"116"},{"ruleId":"103","severity":1,"message":"108","line":1,"column":27,"nodeType":"105","messageId":"106","endLine":1,"endColumn":36},{"ruleId":"103","severity":1,"message":"107","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":25},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],["117"],["118"],"@typescript-eslint/no-unused-vars","'CommentForm' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'Header' is assigned a value but never used.","'loading' is assigned a value but never used.","'success' is assigned a value but never used.","'ComponentProps' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["119"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [props.history, success]",{"range":"122","text":"123"},[2854,2863],"[props.history, success]"]